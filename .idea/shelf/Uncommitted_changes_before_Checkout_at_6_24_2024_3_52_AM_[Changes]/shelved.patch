Index: backend/src/main/java/com/motorph/ems/controller/EmployeeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.motorph.ems.controller;\r\n\r\n\r\nimport com.motorph.ems.dto.AttendanceSummary;\r\nimport com.motorph.ems.model.*;\r\nimport com.motorph.ems.service.*;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Qualifier;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport static java.time.temporal.ChronoUnit.HOURS;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@CrossOrigin\r\n@RestController\r\n@RequestMapping(path = \"api/employees\")\r\npublic class EmployeeController {\r\n\r\n    private final EmployeeService employeeService;\r\n    private final BenefitsService benefitsService;\r\n    private final EmploymentService employmentService;\r\n    private final GovernmentIdService governmentIdService;\r\n    private final AttendanceService attendanceService;\r\n    private final LeaveBalanceService leaveBalanceService;\r\n    private final LeaveRequestService leaveRequestService;\r\n    private final PayrollService payrollService;\r\n\r\n    @Autowired\r\n    public EmployeeController(\r\n            EmployeeService employeeService,\r\n            @Qualifier(\"employeeServiceImpl\")\r\n            BenefitsService benefitsService,\r\n            @Qualifier(\"employeeServiceImpl\")\r\n            EmploymentService employmentService,\r\n            @Qualifier(\"employeeServiceImpl\")\r\n            GovernmentIdService governmentIdService,\r\n            AttendanceService attendanceService,\r\n            LeaveBalanceService leaveBalanceService,\r\n            LeaveRequestService leaveRequestService,\r\n            PayrollService payrollService\r\n    ){\r\n        this.employeeService = employeeService;\r\n        this.benefitsService = benefitsService;\r\n        this.employmentService = employmentService;\r\n        this.governmentIdService = governmentIdService;\r\n        this.attendanceService = attendanceService;\r\n        this.leaveBalanceService = leaveBalanceService;\r\n        this.leaveRequestService = leaveRequestService;\r\n        this.payrollService = payrollService;\r\n    }\r\n\r\n    @PostMapping(\"/register\")\r\n    public void registerEmployee(@RequestBody Employee employee) {\r\n        employeeService.addNewEmployee(employee);\r\n    }\r\n\r\n    @GetMapping()\r\n    public List<Employee> getAllEmployees(\r\n        @RequestParam(value = \"name\", required = false) String name\r\n    ) {\r\n        if(name != null) {\r\n            if(!name.isEmpty()) {\r\n                return employeeService.getAllEmployeesNameContains(name);\r\n            } else {\r\n                return employeeService.getAllEmployees();\r\n            }\r\n        } else {\r\n            return employeeService.getAllEmployees();\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/{id}\")\r\n    public Employee getEmployeeById(@PathVariable(value = \"id\") Long employeeID) {\r\n        return employeeService.getEmployeeById(employeeID);\r\n    }\r\n\r\n    @PatchMapping(\"/{id}\")\r\n    public Employee updateEmployee(\r\n            @PathVariable(value = \"id\") Long employeeID,\r\n            @RequestBody Employee employeeDetails\r\n    ) {\r\n        return employeeService.updateEmployee(employeeDetails);\r\n    }\r\n\r\n    @DeleteMapping(\"/{id}\")\r\n    public ResponseEntity<Void> deleteEmployee(@PathVariable(value = \"id\") Long employeeID) {\r\n        if (employeeService.getEmployeeById(employeeID) == null) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n        employeeService.deleteEmployee(employeeID);\r\n        return ResponseEntity.noContent().build();\r\n    }\r\n\r\n    @GetMapping(\"/{id}/employment\")\r\n    public Employment getEmploymentByEmployeeId(@PathVariable(value = \"id\") Long employeeID) {\r\n        return employmentService.getEmploymentByEmployeeId(employeeID);\r\n    }\r\n\r\n    @GetMapping(\"/{id}/governmentIds\")\r\n    public List<GovernmentId> getGovernmentIdByEmployeeId(@PathVariable(value = \"id\") Long employeeID) {\r\n        return governmentIdService.getAllGovernmentIdByEmployeeId(employeeID);\r\n    }\r\n    @GetMapping(\"/{id}/benefits\")\r\n    public List<Benefits> getBenefitsByEmployeeId(@PathVariable(value = \"id\") Long employeeID) {\r\n        return benefitsService.getAllBenefitsByEmployeeId(employeeID);\r\n    }\r\n\r\n    @GetMapping(\"/{id}/attendances\")\r\n    public List<Attendance> getEmployeeAttendance(\r\n            @PathVariable long id,\r\n            @RequestParam(value = \"date\", required = false) String date\r\n    ) {\r\n        if(date != null) {\r\n            List<Attendance> attendanceList = new ArrayList<>();\r\n            attendanceList.add(attendanceService.getAttendanceByEmployeeIdAndDate(id, LocalDate.parse(date)));\r\n            return attendanceList;\r\n        } else {\r\n            return attendanceService.getAllAttendancesByEmployeeId(id);\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/{id}/attendances/summary\")\r\n    public AttendanceSummary getEmployeeAttendanceSummary(\r\n            @PathVariable long id\r\n    ) {\r\n        return attendanceService.getAttendanceSummaryByEmployeeId(id);\r\n    }\r\n\r\n    @PostMapping(\"/{id}/attendances/timeIn\")\r\n    public Attendance employeeTimeIn(@PathVariable long id) {\r\n        Employee employee = employeeService.getEmployeeById(id);\r\n        Attendance attendanceToday = new Attendance();\r\n        attendanceToday.setEmployee(employee);\r\n        attendanceToday.setDate(LocalDate.now());\r\n        attendanceToday.setTimeIn(LocalTime.now());\r\n        return attendanceService.addNewAttendance(attendanceToday);\r\n    }\r\n\r\n    @PostMapping(\"/{id}/attendances/timeOut\")\r\n    public Attendance employeeTimeOut(@PathVariable long id) {\r\n        Attendance attendanceToday = attendanceService.getAttendanceByEmployeeIdAndDate(id, LocalDate.now());\r\n        LocalTime timeOut = LocalTime.now();\r\n\r\n        attendanceToday.setTimeOut(timeOut);\r\n        attendanceToday.setHoursWorked(\r\n                (int) HOURS.between(attendanceToday.getTimeIn(),timeOut)\r\n        );\r\n        attendanceToday.setOvertime(\r\n                Math.max(0, (int) HOURS.between(LocalTime.of(17, 0),timeOut))\r\n        );\r\n        return attendanceService.updateAttendance(attendanceToday);\r\n    }\r\n\r\n\r\n    @GetMapping(\"/{id}/leave-balances\")\r\n    public List<LeaveBalance> getEmployeeLeaveBalance(@PathVariable long id) {\r\n        return leaveBalanceService.getLeaveBalancesByEmployeeId(id);\r\n    }\r\n\r\n    @GetMapping(\"/{id}/leave-requests\")\r\n    public List<LeaveRequest> getEmployeeLeaveRequest(@PathVariable long id) {\r\n        return leaveRequestService.getAllLeaveRequestsByEmployeeId(id);\r\n    }\r\n\r\n    @GetMapping(\"/{id}/payrolls\")\r\n    public List<Payroll> getEmployeePayroll(\r\n            @PathVariable long id,\r\n            @RequestParam(value = \"startDate\", required = false) String startDate,\r\n            @RequestParam(value = \"endDate\", required = false) String endDate\r\n    ){\r\n        if(startDate != null && endDate != null) {\r\n            LocalDate start = LocalDate.parse(startDate);\r\n            LocalDate end = LocalDate.parse(endDate);\r\n            return payrollService.getPayrollByEmployeeIdAndPeriodDates(id, start, end);\r\n        } else {\r\n            return payrollService.getPayrollsByEmployeeId(id);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/motorph/ems/controller/EmployeeController.java b/backend/src/main/java/com/motorph/ems/controller/EmployeeController.java
--- a/backend/src/main/java/com/motorph/ems/controller/EmployeeController.java	
+++ b/backend/src/main/java/com/motorph/ems/controller/EmployeeController.java	
@@ -9,12 +9,13 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.*;
 
-import static java.time.temporal.ChronoUnit.HOURS;
 import java.time.LocalDate;
 import java.time.LocalTime;
 import java.util.ArrayList;
 import java.util.List;
 
+import static java.time.temporal.ChronoUnit.HOURS;
+
 @CrossOrigin
 @RestController
 @RequestMapping(path = "api/employees")
